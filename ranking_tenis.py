# -*- coding: utf-8 -*-
"""Ranking Tenis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F55dmkFLi6xUY9VwrgEaK2fd-pizj0cM
"""
import pandas as pd
import streamlit as st
from datetime import datetime
# @title
# Initialize player rankings (everyone starts with 1000 points)
players = ["Marinkovic", "Joseto", "Hernan", "Pavez", "Bozzo", "Bishara", "Hederra", "Poch", "Juande", "Fe√±a","Hans"]
points = [1000 for _ in players]


# Create a DataFrame to store rankings
rankings = pd.DataFrame({"Player": players, "Points": points})




# Function to record a match and update rankings
def record_match(winner, loser, base_points=50, upset_multiplier=1.5):
    global rankings, match_history

    # Get winner and loser current points
    winner_points = rankings.loc[rankings['Player'] == winner, 'Points'].values[0]
    loser_points = rankings.loc[rankings['Player'] == loser, 'Points'].values[0]

    # Calculate points exchanged
    points_exchanged = base_points + (0.05 * loser_points)  # 5% of loser's points
    if winner_points < loser_points:
        points_exchanged *= upset_multiplier  # Apply upset multiplier if winner is lower-ranked

    # Update rankings
    rankings.loc[rankings['Player'] == winner, 'Points'] += points_exchanged
    rankings.loc[rankings['Player'] == loser, 'Points'] -= points_exchanged

    # Ensure no player has negative points
    rankings['Points'] = rankings['Points'].clip(lower=0)

    # Sort rankings by points
    rankings = rankings.sort_values(by="Points", ascending=False).reset_index(drop=True)


    # Add the match to match history
    match_history = pd.concat([
        match_history,
        pd.DataFrame({
            "Date": [datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
            "Winner": [winner],
            "Loser": [loser],
            "Points Exchanged": [round(points_exchanged, 2)]
        })
    ], ignore_index=True)


# Function to display the current rankings with colors and rank numbers
def display_rankings():
    print("\nCurrent Rankings:")
    rankings_with_rank = rankings.copy()
    rankings_with_rank.insert(0, "Rank", range(1, len(rankings_with_rank) + 1))

    # Convert rankings DataFrame to HTML with inline styling for colors
    table_html = rankings_with_rank.to_html(index=False, escape=False)
    table_html = table_html.replace(
        '<thead>', '<thead style="background-color: #4CAF50; color: white; text-align: center;">')
    table_html = table_html.replace(
        '<table border="1" class="dataframe">', '<table style="border-collapse: collapse; width: 100%; border: 1px solid black;">')
    table_html = table_html.replace(
        '<th>', '<th style="padding: 8px; border: 1px solid black;">')
    table_html = table_html.replace(
        '<td>', '<td style="padding: 8px; border: 1px solid black; text-align: center;">')

    display(HTML(table_html))


# Function to display match history
def display_match_history():
    print("\nMatch History:")
    display(match_history)

# Display updated rankings



match_history = pd.DataFrame(columns=["Date", "Winner", "Loser", "Points Exchanged"])



# Assuming rankings and match_history DataFrames are imported from the main code
# rankings and match_history should already be initialized

def interactive_match_entry():
    """
    Interactive function for managing tennis rankings and match history.
    Offers options to view rankings, see match history, or record a match.
    """
    global rankings, match_history

    while True:
        # Clear the screen for a cleaner interface
        clear_output(wait=True)

        print("=" * 40)
        print("üéæ Welcome to the Tennis Rankings Interface üéæ")
        print("=" * 40)

        # Display menu options
        print("\nPlease choose an option:")
        print("1Ô∏è‚É£  See Rankings")
        print("2Ô∏è‚É£  See Match History")
        print("3Ô∏è‚É£  Record a Match Result")
        print("4Ô∏è‚É£  Exit")

        # Get user choice
        choice = input("\nEnter the number of your choice: ").strip()

        if choice == "1":
            clear_output(wait=True)
            print("\nüìä Current Rankings:")
            display_rankings()
            input("\nPress Enter to return to the menu...")

        elif choice == "2":
            clear_output(wait=True)
            print("\nüìú Match History:")
            display_match_history()
            input("\nPress Enter to return to the menu...")

        elif choice == "3":
            while True:
                clear_output(wait=True)
                print("\nüèÖ Record a Match Result")
                print("Current Players:")
                print(", ".join(rankings["Player"].to_list()))

                # Get user input for winner and loser
                winner = input("Enter the name of the winner: ").strip()
                loser = input("Enter the name of the loser: ").strip()

                # Validate inputs
                if winner not in rankings["Player"].to_list() or loser not in rankings["Player"].to_list():
                    print("\n‚ùå Error: One or both player names are not in the rankings. Please try again.")
                    input("Press Enter to continue...")
                    continue

                if winner == loser:
                    print("\n‚ùå Error: Winner and loser cannot be the same person. Please try again.")
                    input("Press Enter to continue...")
                    continue

                # Record the match
                record_match(winner, loser)
                print(f"\n‚úÖ Match recorded: {winner} defeated {loser}.")

                # Display updated rankings
                display_rankings()

                # Ask if the user wants to add another match
                another = input("\nDo you want to record another match? (yes/no): ").strip().lower()
                if another != "yes":
                    break

        elif choice == "4":
            clear_output(wait=True)
            print("üëã Goodbye! See you next time!")
            break

        else:
            print("\n‚ùå Invalid choice. Please enter a number between 1 and 4.")
            input("Press Enter to continue...")

# Example usage
interactive_match_entry()
